@function fr($selector, $name, $i) {
  $a: str-replace($selector, "#name", $name);
  @return if(str-index($a, '#i') != null, str-replace($a, "#i", $i), $a);
}

@function str-replace($selector, $pin, $val) {
  $index: str-index($selector, $pin);
  $c: str-slice($selector, 1, $index - 1) +
    $val + str-slice($selector, $index + str-length($pin));
  @return $c;
}

@function exponent($number, $exponent) {
  $total: $number;
  @for $i from 1 to $exponent {
    $total: $total * $number;
  }
  @return $total;
}

@function fe($selector, $name, $noProc, $i: '') {
  $c: if(
    $noProc == true,
    fr($selector, $name, $i),
    join(fr($selector, '', $i), fr($selector, $name, $i), comma)
  );

  @return $c;
}

@mixin fg($name, $size) {
  $noProcNotZero: $size > 0;
  @media (min-width: $size) {
    #{fe('.col#name', $name, $noProcNotZero)} {
      &, &-auto, &-grow {
        .row > &, .flex > & {
          width: auto;
          min-width: 0;
          max-width: 100%;
        }
        .column > &, .flex > & {
          height: auto;
          min-height: 0;
          max-height: 100%;
        }
      }
      & {
        flex: #{exponent(10, 4)} 1 0%;
      }
      &-auto {
        flex: 0 0 auto;
      }
      &-grow {
        flex: 1 0 auto;
      }
    }
  }
  @for $i from 1 through $flex-cols {
    #{fe('.col#name-#i', $name, $noProcNotZero, $i)} {
      @extend .col#{$name}-auto;
    }
    .row {
      #{fe('> .col#name-#i', $name, $noProcNotZero, $i)} {
        height: auto;
        width: unquote('#{$i / $flex-cols * 100}%');
      }
      @if $name != '' {
        #{fe('> .offset#name-#i', $name, $noProcNotZero, $i)} {
          margin-left: unquote('#{$i / $flex-cols * 100}%');
        }
      }
    }
    .column {
      #{fe('> .col#name-#i', $name, $noProcNotZero, $i)} {
        height: unquote('#{$i / $flex-cols * 100}%');
        width: auto;
      }
    }
  }
}

.row, .column, .flex {
  display: flex;
  flex-wrap: wrap;
  &.inline {
    display: inline-flex;
  }
}

.row.reverse {
  flex-direction: row-reverse
}

.column {
  flex-direction: column;
  &.reverse {
    flex-direction: column-reverse
  }
}

.wrap {
  flex-wrap: wrap;
}
.no-wrap {
  flex-wrap: nowrap;
}
.reverse-wrap {
  flex-wrap: wrap-reverse;
}

.order- {
  &first {
    order: -10000;
  }
  &last {
    order: 10000;
  }
  &none {
    order: 0;
  }
}

.justify- {
  &start {
    justify-content: flex-start;
  }
  &end {
    justify-content: flex-end;
  }
  &center {
    justify-content: center;
  }
  &between {
    justify-content: space-between;
  }
  &around {
    justify-content: space-around;
  }
}

.items- {
  &start {
    align-items: flex-start;
  }
  &end {
    align-items: flex-end;
  }
  &center {
    align-items: center;
  }
  &baseline {
    align-items: baseline;
  }
  &stretch {
    align-items: stretch;
  }
}

.content- {
  &start {
    align-content: flex-start;
  }
  &end {
    align-content: flex-end;
  }
  &center {
    align-content: center;
  }
  &stretch {
    align-content: stretch;
  }
  &between {
    align-content: space-between;
  }
  &around {
    align-content: space-around;
  }
}

.self- {
  &start {
    align-self: flex-start;
  }
  &end {
    align-self: flex-end;
  }
  &center {
    align-self: center;
  }
  &baseline {
    align-self: baseline;
  }
  &stretch {
    align-self: stretch;
  }
}

.flex-center {
  @extend .items-center;
  @extend .justify-center;
}

@each $name, $size in $flex-gutter {
  .gutter- {
    &x-#{$name} {
      margin-left: (- $size);
      > div {
        padding-left: $size;
      }
    }
    &y-#{$name} {
      margin-top: (- $size);
      > div {
        padding-top: $size;
      }
    }
    &#{$name} {
      @extend .gutter-x-#{$name}, .gutter-y-#{$name};
      > div {
        @extend .gutter-x-#{$name}, .gutter-y-#{$name};
      }
    }
  }
}

@each $name, $size in $sizes {
  @include fg("-#{$name}", $size);
}
